# ui.py
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from datetime import datetime, timezone

# –≤–∏–∫–ª–∏–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –Ω–∞–ø—Ä—è–º—É
from myvpn import cmd_myvpn
from howto import cmd_howto
from payments import cmd_buy

# –¥–ª—è —Å—Ç–∞—Ç—É—Å—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –Ω–∞–ø—Ä—è–º—É
from db.repo import is_active

ui_router = Router(name="ui")

# ---- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ --------------------------------------------------------------
BTN_MYVPN = "üõ°Ô∏è My VPN"
BTN_STATUS = "üìä Status"
BTN_HOWTO = "üß© HowTo"
BTN_BUY = "üí≥ Buy / Extend"

def main_reply_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BTN_MYVPN), KeyboardButton(text=BTN_STATUS)],
            [KeyboardButton(text=BTN_HOWTO), KeyboardButton(text=BTN_BUY)],
        ],
        resize_keyboard=True,
        input_field_placeholder="–û–±–µ—Ä–∏ –¥—ñ—é‚Ä¶",
    )

# ---- /menu -------------------------------------------------------------------
@ui_router.message(Command("menu"))
async def cmd_menu(message: types.Message):
    await message.answer("–ú–µ–Ω—é –¥—ñ–π:", reply_markup=main_reply_kb())

# ---- –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ --------------------------------------------
@ui_router.message(F.text == BTN_MYVPN)
async def on_myvpn_btn(message: types.Message):
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —Ö–µ–Ω–¥–ª–µ—Ä /myvpn
    await cmd_myvpn(message)

@ui_router.message(F.text == BTN_STATUS)
async def on_status_btn(message: types.Message):
    # –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –ª–æ–≥—ñ–∫—É /status –±–µ–∑ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –∫–æ–¥—É –≤ bot.py
    try:
        active, sub = await is_active(telegram_id=message.from_user.id)
        if not sub:
            await message.answer("–£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–æ–∫. –ù–∞–¥—ñ—à–ª–∏ /start, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç.")
            return

        now = datetime.now(timezone.utc)
        left_days = (sub.expires_at - now).days if sub.expires_at else None
        trial_mark = " (trial)" if getattr(sub, "is_trial", False) else ""

        if active:
            await message.answer(
                f"‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞{trial_mark}\n"
                f"–î—ñ—î –¥–æ: <b>{sub.expires_at:%Y-%m-%d %H:%M UTC}</b>\n"
                f"–ó–∞–ª–∏—à–∏–ª–æ—Å—å: <b>{left_days} –¥–Ω.</b>"
            )
        else:
            await message.answer(
                f"‚õî –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞{trial_mark}\n"
                f"–ó–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å: <b>{sub.expires_at:%Y-%m-%d %H:%M UTC}</b>\n"
                f"–û—Ñ–æ—Ä–º–∏ –ø—ñ–¥–ø–∏—Å–∫—É, —ñ —è –ø—Ä–æ–¥–æ–≤–∂—É –¥–æ—Å—Ç—É–ø."
            )
    except Exception as e:
        print(f"[ui.status_btn] ERROR: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å. –°–∫–∏–Ω—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ª–æ–≥ —ñ–∑ –∫–æ–Ω—Å–æ–ª—ñ.")

@ui_router.message(F.text == BTN_HOWTO)
async def on_howto_btn(message: types.Message):
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —Ö–µ–Ω–¥–ª–µ—Ä /howto
    await cmd_howto(message)

@ui_router.message(F.text == BTN_BUY)
async def on_buy_btn(message: types.Message):
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —Ö–µ–Ω–¥–ª–µ—Ä /buy
    await cmd_buy(message, message.bot)
