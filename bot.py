import asyncio
from aiogram import Bot, Dispatcher, executor, types
from datetime import datetime, timedelta

import config
import database
import payments

bot = Bot(token=config.BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# –ó–∞–ø—É—Å–∫ –ë–î
database.init_db()


async def check_subscriptions():
    """
    –§–æ–Ω–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ ~3600—Å (1 –≥–æ–¥–∏–Ω–∞).
    –•—Ç–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–∏–≤ - —Ä–æ–±–∏–º–æ deactivate_user().
    (–©–æ–± —â–µ –π x-ui –≤–∏–º–∫–Ω—É—Ç–∏ - —Ç—Ä–µ–±–∞ API x-ui, —Å—é–¥–∏ –¥–æ–¥–∞—Ç–∏ –≤–∏–∫–ª–∏–∫–∏).
    """
    while True:
        users = database.get_all_active_users()
        now = datetime.now()
        for u in users:
            end_date = datetime.strptime(u["end_date"], "%Y-%m-%d %H:%M:%S")
            if now > end_date:
                # –¢–µ—Ä–º—ñ–Ω —Å–∫—ñ–Ω—á–∏–≤—Å—è, –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ
                database.deactivate_user(u["id"])
                # –°–ø–æ–≤—ñ—â–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                try:
                    await bot.send_message(
                        u["telegram_id"],
                        "–¢–≤—ñ–π –¥–æ—Å—Ç—É–ø –∑–∞–≤–µ—Ä—à–∏–≤—Å—è. –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –Ω–∞–±–µ—Ä–∏ /renew"
                    )
                except:
                    pass
                # TODO: –≤–∏–∫–ª–∏–∫ API x-ui, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏/–¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π –∞–∫–∞—É–Ω—Ç
        await asyncio.sleep(3600)  # 1 –≥–æ–¥–∏–Ω–∞


@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ SVPN Bot\n\n"
        "üîπ /getvpn ‚Äî –æ—Ç—Ä–∏–º–∞—Ç–∏ VPN –¥–æ—Å—Ç—É–ø –Ω–∞ 3 –¥–Ω—ñ\n"
        "üîπ /myvpn ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å\n"
        "üîπ /renew ‚Äî –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–æ—Å—Ç—É–ø\n"
        "üîπ /help ‚Äî —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è"
    )
    await message.answer(text)


@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    text = f"–ü–æ–≤–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è: {config.HELP_URL}\n\n–Ø–∫—â–æ —î –ø–∏—Ç–∞–Ω–Ω—è, –ø–∏—à–∏ /start"
    await message.answer(text)


@dp.message_handler(commands=["getvpn"])
async def cmd_getvpn(message: types.Message):
    user = database.get_user_by_telegram_id(message.from_user.id)
    if user and user["active"] == 1:
        # –í–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π
        await message.answer("–£ —Ç–µ–±–µ –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø, –ø–µ—Ä–µ–≤—ñ—Ä –∫–æ–º–∞–Ω–¥–æ—é /myvpn")
        return
    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    now = datetime.now()
    end = now + timedelta(days=config.FREE_DAYS)
    uuid = generate_uuid()  # –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ UUID
    # –¢–£–¢ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç —É x-ui. –ó–∞—Ä–∞–∑ –ª–∏—à–∞—î–º–æ –∑–∞–≥–ª—É—à–∫—É.

    database.add_user(
        str(message.from_user.id),
        uuid,
        now.strftime("%Y-%m-%d %H:%M:%S"),
        end.strftime("%Y-%m-%d %H:%M:%S")
    )
    # –ì–µ–Ω–µ—Ä—É—î–º–æ vmess://
    vmess_link = create_vmess_link(uuid)
    await message.answer(
        f"–¢—Ä–∏–º–∞–π —Å–≤—ñ–π VPN –Ω–∞ {config.FREE_DAYS} –¥–Ω—ñ–≤!\n\n"
        f"UUID: <code>{uuid}</code>\n"
        f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è (–¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ v2ray):\n<code>{vmess_link}</code>\n\n"
        "–ü–æ—á–∏–Ω–∞–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å!"
    )


@dp.message_handler(commands=["myvpn"])
async def cmd_myvpn(message: types.Message):
    user = database.get_user_by_telegram_id(message.from_user.id)
    if not user or user["active"] == 0:
        await message.answer("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É. –°–ø—Ä–æ–±—É–π /getvpn")
        return
    uuid = user["uuid"]
    end_date = user["end_date"]
    vmess_link = create_vmess_link(uuid)
    await message.answer(
        f"–¢–≤—ñ–π –¥–æ—Å—Ç—É–ø –¥—ñ–π—Å–Ω–∏–π –¥–æ <b>{end_date}</b>\n\n"
        f"UUID: <code>{uuid}</code>\n\n"
        f"Vmess: <code>{vmess_link}</code>"
    )


@dp.message_handler(commands=["renew"])
async def cmd_renew(message: types.Message):
    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –æ–ø–ª–∞—Ç–∏ TON/USDT
    kb = types.InlineKeyboardMarkup()
    btn_ton = types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç–∏ TON", callback_data="pay_ton")
    btn_usdt = types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç–∏ USDT", callback_data="pay_usdt")
    kb.add(btn_ton, btn_usdt)
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç–∏. –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤–∞—à –¥–æ—Å—Ç—É–ø "
        f"–±—É–¥–µ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ –Ω–∞ {config.PAID_DAYS} –¥–Ω—ñ–≤",
        reply_markup=kb
    )


@dp.callback_query_handler(lambda c: c.data in ["pay_ton", "pay_usdt"])
async def process_payment_callback(call: types.CallbackQuery):
    currency = "TON" if call.data == "pay_ton" else "USDT"
    amount = config.PRICE_TON if currency == "TON" else config.PRICE_USDT
    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–≤–æ–π—Å
    payload = str(call.from_user.id)  # –ø–æ—Ç—ñ–º –¥—ñ–∑–Ω–∞—î–º–æ—Å—å, —Ö—Ç–æ –æ–ø–ª–∞—Ç–∏–≤
    invoice_id, pay_url = payments.create_invoice(currency, amount, payload)
    if not invoice_id:
        await call.message.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —ñ–Ω–≤–æ–π—Å—É üò• –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    # –î–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏", url=pay_url))
    # –ó–±–µ—Ä–µ–∂–µ–º–æ invoice_id —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –ø–æ—Ç—ñ–º –≤—ñ–¥–ª–æ–≤–∏—Ç–∏ callback
    await call.message.answer(f"–°—É–º–∞: {amount} {currency}\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É:", reply_markup=kb)


@dp.inline_handler()
async def inline_query(query: types.InlineQuery):
    pass
    # –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ inline-mode –≤ —Ü—å–æ–º—É MVP


# (–î–ª—è –æ—Å—Ç–∞—Ç–æ—á–Ω–æ—ó —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó callback –≤—ñ–¥ CryptoBot —Ç—Ä–µ–±–∞ webhook
# –∞–±–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏–π check. –°–ø—Ä–æ—â–µ–Ω–æ —Ä–æ–±–∏–º–æ check –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–Ø –æ–ø–ª–∞—Ç–∏–≤"?)

# –Ø–∫—â–æ —Ö–æ—á–µ–º–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ callback –≤—ñ–¥ CryptoBot –æ—Ñ—ñ—Ü—ñ–π–Ω–æ ‚Äì
# —Ç—Ä–µ–±–∞ –º–∞—Ç–∏ webhook, –¥–µ CryptoBot –Ω–∞–¥—Å–∏–ª–∞—î:
# {
#   "update_id": ...
#   "invoice_payload": "123456789",
#   "invoice_id": ...,
#   "status": "paid"
# }
# —ñ —Ç.–¥.

# ------------------------------- UTILS --------------------------------#

import uuid


def generate_uuid():
    return str(uuid.uuid4())


def create_vmess_link(u):
    """
    –î—É–∂–µ —Å–ø—Ä–æ—â–µ–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥. –†–µ–∞–ª—å–Ω–æ —Ç—Ä–µ–±–∞ –≤—à–∏—Ç–∏ JSON —É base64.
    –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —Ü–µ "—á–∏—Å—Ç–∏–π" vmess://uuid
    """
    return f"vmess://{u}"


# ----------------------------- RUN ------------------------------------#

async def on_startup(_):
    # –ó–∞–ø—É—Å—Ç–∏–º–æ —Ñ–æ–Ω–æ–≤—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
    asyncio.create_task(check_subscriptions())


def main():
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)


if __name__ == "__main__":
    main()
