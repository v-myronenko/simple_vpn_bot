# bot.py
import asyncio
import logging
import os
from datetime import datetime, timezone

from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import BotCommand
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

from db.models import init_models
from db.repo import get_or_create_user, grant_trial_if_needed, is_active
from howto import howto_router
from myvpn import myvpn_router

logging.basicConfig(level=logging.INFO)

# ------------------------- ENV -------------------------
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π —É .env")

# --------------------- BOT/DP/ROUTER -------------------
bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML"),
)
dp = Dispatcher()
router = Router(name="root")

# –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ –º–æ–¥—É–ª—ñ
router.include_router(howto_router)
router.include_router(myvpn_router)

# --------------------- HANDLERS ------------------------
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        user = await get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
        )
        granted = await grant_trial_if_needed(user_id=user.id)
        if granted:
            await message.answer(
                "üëã –í—ñ—Ç–∞—é! –°—Ç–≤–æ—Ä–∏–≤ –∞–∫–∞—É–Ω—Ç —ñ –∞–∫—Ç–∏–≤—É–≤–∞–≤ <b>7 –¥–Ω—ñ–≤ trial</b>.\n\n"
                "‚Ä¢ –°—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏: /status\n"
                "‚Ä¢ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: /howto\n"
                "‚Ä¢ –ö–æ–Ω—Ñ—ñ–≥ —ñ QR: /myvpn"
            )
        else:
            await message.answer(
                "üëã –í—ñ—Ç–∞—é –∑ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º!\n"
                "‚Ä¢ –°—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏: /status\n"
                "‚Ä¢ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: /howto\n"
                "‚Ä¢ –ö–æ–Ω—Ñ—ñ–≥ —ñ QR: /myvpn"
            )
    except Exception as e:
        print(f"[/start] ERROR: {e}")
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞. –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –ª–æ–≥ –∑ –∫–æ–Ω—Å–æ–ª—ñ ‚Äî —à–≤–∏–¥–∫–æ –ø–æ—Ñ—ñ–∫—Å–∏–º–æ.")

@router.message(Command("status"))
async def cmd_status(message: types.Message):
    try:
        active, sub = await is_active(telegram_id=message.from_user.id)
        if not sub:
            await message.answer("–£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–æ–∫. –ù–∞–¥—ñ—à–ª–∏ /start, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç.")
            return

        now = datetime.now(timezone.utc)
        left_days = (sub.expires_at - now).days if sub.expires_at else None
        trial_mark = " (trial)" if getattr(sub, "is_trial", False) else ""

        if active:
            await message.answer(
                f"‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞{trial_mark}\n"
                f"–î—ñ—î –¥–æ: <b>{sub.expires_at:%Y-%m-%d %H:%M UTC}</b>\n"
                f"–ó–∞–ª–∏—à–∏–ª–æ—Å—å: <b>{left_days} –¥–Ω.</b>"
            )
        else:
            await message.answer(
                f"‚õî –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞{trial_mark}\n"
                f"–ó–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å: <b>{sub.expires_at:%Y-%m-%d %H:%M UTC}</b>\n"
                f"–û—Ñ–æ—Ä–º–∏ –ø—ñ–¥–ø–∏—Å–∫—É, —ñ —è –ø—Ä–æ–¥–æ–≤–∂—É –¥–æ—Å—Ç—É–ø."
            )
    except Exception as e:
        print(f"[/status] ERROR: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å. –°–∫–∏–Ω—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ª–æ–≥ —ñ–∑ –∫–æ–Ω—Å–æ–ª—ñ.")

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ trial (1 —Ä–∞–∑)\n"
        "/status ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω –ø—ñ–¥–ø–∏—Å–∫–∏\n"
        "/howto ‚Äî —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è WireGuard\n"
        "/myvpn ‚Äî –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥ —ñ QR"
    )

# ---------------- BOT MENU (optional) ------------------
async def setup_bot_commands(b: Bot):
    await b.set_my_commands([
        BotCommand(command="start", description="–°—Ç–∞—Ä—Ç —ñ trial"),
        BotCommand(command="status", description="–°—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏"),
        BotCommand(command="howto", description="–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"),
        BotCommand(command="myvpn", description="–ö–æ–Ω—Ñ—ñ–≥ —ñ QR"),
        BotCommand(command="help", description="–î–æ–ø–æ–º–æ–≥–∞"),
    ])

# ---------------------- MAIN --------------------------
async def main():
    # 1) —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ —ó—Ö —â–µ –Ω–µ–º–∞
    await init_models()

    # 2) –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤–∏–π —Ä–æ—É—Ç–µ—Ä —É –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp.include_router(router)

    # 3) –∫–æ–º–∞–Ω–¥–∏ –≤ –º–µ–Ω—é
    await setup_bot_commands(bot)

    # 4) –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–ª–ª—ñ–Ω–≥
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
