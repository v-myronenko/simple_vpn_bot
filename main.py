import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.filters.command import Command, CommandObject

import config
import database
import payments
from xui_api import add_user_to_xui

bot = Bot(
    token=config.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)

# ---------------- –ö–æ–º–∞–Ω–¥–∏ ------------------ #

async def cmd_start(message: Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üîê –û—Ç—Ä–∏–º–∞—Ç–∏ VPN"),
                KeyboardButton(text="üì¶ –ú—ñ–π –¥–æ—Å—Ç—É–ø"),
                KeyboardButton(text="üîÅ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–æ—Å—Ç—É–ø")
            ],
            [
                KeyboardButton(text="üìò –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è"),
                KeyboardButton(text="üìã Terms"),
                KeyboardButton(text="‚öôÔ∏è Support"),
                KeyboardButton(text="üí∏ Pay support")
            ]
        ],
        resize_keyboard=True,
        input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ üëá"
    )

    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ SVPN Bot. –û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=kb
    )

async def cmd_help(message: Message):
    await message.answer(f"""–ü–æ–≤–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è: {config.HELP_URL}

–ö–æ—Ä–æ—Ç–∫–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:
1. –ó–∞–≤–∞–Ω—Ç–∞–∂ Qv2ray
2. –ó–∞–ø—É—Å—Ç–∏
3. –ù–∞—Ç–∏—Å–Ω–∏ Import > From Link > –≤—Å—Ç–∞–≤ Vmess
4. –ü—ñ–¥–∫–ª—é—á–∏—Å—å üòé""")

async def cmd_getvpn(message: Message):
    user = database.get_user_by_telegram_id(message.from_user.id)
    if user and user["active"] == 1:
        await message.answer("–£ —Ç–µ–±–µ –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø. –ü–µ—Ä–µ–≤—ñ—Ä /myvpn")
        return

    now = datetime.now()
    end = now + timedelta(days=config.FREE_DAYS)
    uuid = database.generate_uuid()

    database.add_user(
        str(message.from_user.id),
        uuid,
        now.strftime("%Y-%m-%d %H:%M:%S"),
        end.strftime("%Y-%m-%d %H:%M:%S")
    )

    success = add_user_to_xui(uuid, config.INBOUND_ID)
    if not success:
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É.")
        return

    vmess_link = database.create_vmess_link(uuid)
    await message.answer(
        f"–¢—Ä–∏–º–∞–π —Å–≤—ñ–π VPN –Ω–∞ {config.FREE_DAYS} –¥–Ω—ñ!\n\n"
        f"UUID: <code>{uuid}</code>\n"
        f"Vmess: <code>{vmess_link}</code>"
    )

async def cmd_myvpn(message: Message):
    user = database.get_user_by_telegram_id(message.from_user.id)
    if not user or user["active"] == 0:
        await message.answer("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É. –°–ø—Ä–æ–±—É–π /getvpn")
        return

    uuid = user["uuid"]
    end_date = user["end_date"]
    vmess_link = database.create_vmess_link(uuid)
    await message.answer(
        f"–¢–≤—ñ–π –¥–æ—Å—Ç—É–ø –¥—ñ–π—Å–Ω–∏–π –¥–æ <b>{end_date}</b>\n\n"
        f"UUID: <code>{uuid}</code>\n"
        f"Vmess: <code>{vmess_link}</code>"
    )

async def cmd_renew(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç–∏ TON", callback_data="pay_ton"),
            InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç–∏ USDT", callback_data="pay_usdt")
        ]
    ])
    await message.answer(
        f"–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç–∏. –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤–∞—à –¥–æ—Å—Ç—É–ø –±—É–¥–µ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ –Ω–∞ {config.PAID_DAYS} –¥–Ω—ñ–≤",
        reply_markup=kb
    )

async def cmd_support(message: Message):
    await message.answer("–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:@SimpleVpnSupport –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Å—é–¥–∏ –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏")

async def cmd_terms(message: Message):
    await message.answer("Terms of service: –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ —Å–µ—Ä–≤—ñ—Å—É —è–∫ —î. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è –Ω–µ –≥–∞—Ä–∞–Ω—Ç—É—î 100% –∞–ø—Ç–∞–π–º —ñ –Ω–µ –Ω–µ—Å–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–∞ –≤–∞—à —Ç—Ä–∞—Ñ—ñ–∫.")

async def cmd_paysupport(message: Message):
    await message.answer("For billing or donation-related questions, contact @SimpleVpnSupport")

async def cmd_confirm_payment(message: Message, command: CommandObject):
    if message.from_user.id not in config.ADMINS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    if not command.args:
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /confirm_payment user_id")
        return

    user_id: int = int(command.args.strip())
    user = database.get_user_by_telegram_id(user_id)
    if not user:
        await message.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    new_end = datetime.now() + timedelta(days=config.PAID_DAYS)
    database.extend_subscription(user_id, new_end.strftime("%Y-%m-%d %H:%M:%S"))
    await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id} –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ –¥–æ {new_end.strftime('%Y-%m-%d %H:%M:%S')}")
    try:
        await bot.send_message(user_id, f"‚úÖ –í–∞—à –¥–æ—Å—Ç—É–ø –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ –¥–æ {new_end.strftime('%Y-%m-%d %H:%M:%S')}. –î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É!")
    except:
        pass

async def cb_pay(call: CallbackQuery):
    currency = "TON" if call.data == "pay_ton" else "USDT"
    amount = config.PRICE_TON if currency == "TON" else config.PRICE_USDT

    payload = str(call.from_user.id)
    invoice_id, pay_url = payments.create_invoice(currency, amount, payload)
    if not invoice_id:
        await call.message.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —ñ–Ω–≤–æ–π—Å—É")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏", url=pay_url)]
    ])
    await call.message.answer(
        f"–°—É–º–∞: {amount} {currency}\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É:",
        reply_markup=kb
    )
    await call.answer()

# ---------------------- Callback —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ --------------------- #

async def handle_buttons(message: Message):
    match message.text:
        case "üîê –û—Ç—Ä–∏–º–∞—Ç–∏ VPN": await cmd_getvpn(message)
        case "üì¶ –ú—ñ–π –¥–æ—Å—Ç—É–ø": await cmd_myvpn(message)
        case "üîÅ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–æ—Å—Ç—É–ø": await cmd_renew(message)
        case "üìò –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è": await cmd_help(message)
        case "üìã Terms": await cmd_terms(message)
        case "‚öôÔ∏è Support": await cmd_support(message)
        case "üí∏ Pay support": await cmd_paysupport(message)


# ------------------------- –§–æ–Ω–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ ------------------------- #

async def check_subscriptions():
    while True:
        users = database.get_all_active_users()
        now = datetime.now()
        for u in users:
            end_date = datetime.strptime(u["end_date"], "%Y-%m-%d %H:%M:%S")
            if now > end_date:
                database.deactivate_user(u["id"])
                try:
                    await bot.send_message(u["telegram_id"], "–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –¥–æ—Å—Ç—É–ø—É —Å–∫—ñ–Ω—á–∏–≤—Å—è. /renew –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.")
                except:
                    pass
        await asyncio.sleep(3600)


# ----------------------------- MAIN ------------------------------ #

async def main():
    database.init_db()
    dp = Dispatcher()

    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_help, Command("help"))
    dp.message.register(cmd_getvpn, Command("getvpn"))
    dp.message.register(cmd_myvpn, Command("myvpn"))
    dp.message.register(cmd_renew, Command("renew"))
    dp.message.register(cmd_support, Command("support"))
    dp.message.register(cmd_terms, Command("terms"))
    dp.message.register(cmd_paysupport, Command("paysupport"))
    dp.message.register(cmd_confirm_payment, Command("confirm_payment"))

    dp.message.register(handle_buttons, F.text.in_({
        "üîê –û—Ç—Ä–∏–º–∞—Ç–∏ VPN",
        "üì¶ –ú—ñ–π –¥–æ—Å—Ç—É–ø",
        "üîÅ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–æ—Å—Ç—É–ø",
        "üìò –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è",
        "üìã Terms",
        "‚öôÔ∏è Support",
        "üí∏ Pay support"
    }))
    dp.callback_query.register(cb_pay, F.data.in_({"pay_ton", "pay_usdt"}))

    asyncio.create_task(check_subscriptions())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
