diff --git a/.env.example b/.env.example
index 6e8f8aa..b7b3a1c 100644
--- a/.env.example
+++ b/.env.example
@@ -1,12 +1,20 @@
-TELEGRAM_TOKEN=123:ABC
-DATABASE_URL=sqlite:///./vpn.db
-XUI_URL=http://68.183.70.136:54321
-XUI_LOGIN=admin
-XUI_PASSWORD=Vova-12071988
-INBOUND_ID=1
+TELEGRAM_TOKEN=123:ABC
+DATABASE_URL=sqlite:///./vpn.db
+
+# --- WireGuard server (обов'язково для /config) ---
+# IP або домен твого VPS з WireGuard
+WG_HOST=YOUR_SERVER_IP_OR_DOMAIN
+# користувач на VPS, якому дозволено sudo /usr/local/bin/wg-add-peer
+WG_SSH_USER=wgsvc
+# абсолютний шлях до приватного SSH-ключа (Windows приклад нижче)
+# WG_SSH_KEY=C:\Users\Vova\.ssh\id_ed25519
+WG_SSH_KEY=/absolute/path/to/id_ed25519
+
+# --- x-ui (на майбутнє; наразі не використовується) ---
+# XUI_URL=http://X.X.X.X:54321
+# XUI_LOGIN=admin
+# XUI_PASSWORD=your_password
+# INBOUND_ID=1
diff --git a/config.py b/config.py
index 8c4b2c1..e6e3a5f 100644
--- a/config.py
+++ b/config.py
@@ -1,18 +1,28 @@
 from dotenv import load_dotenv
 import os
 
 load_dotenv()
 
 class Settings:
     TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
     DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./vpn.db")
-    XUI_URL = os.getenv("XUI_URL")
-    XUI_LOGIN = os.getenv("XUI_LOGIN")
-    XUI_PASSWORD = os.getenv("XUI_PASSWORD")
-    INBOUND_ID = int(os.getenv("INBOUND_ID", "1"))
+
+    # WireGuard (використовується для /config)
+    WG_HOST = os.getenv("WG_HOST")
+    WG_SSH_USER = os.getenv("WG_SSH_USER", "wgsvc")
+    WG_SSH_KEY = os.getenv("WG_SSH_KEY")  # абсолютний шлях до приватного ключа
+
+    # x-ui — неактивно (залишаємо на майбутнє)
+    XUI_URL = os.getenv("XUI_URL")
+    XUI_LOGIN = os.getenv("XUI_LOGIN")
+    XUI_PASSWORD = os.getenv("XUI_PASSWORD")
+    INBOUND_ID = int(os.getenv("INBOUND_ID")) if os.getenv("INBOUND_ID") else None
 
 settings = Settings()
diff --git a/handlers/config.py b/handlers/config.py
index 9a3d8f0..b6a4df7 100644
--- a/handlers/config.py
+++ b/handlers/config.py
@@ -1,20 +1,49 @@
-from telegram import Update, InputFile
-from telegram.ext import ContextTypes
-from services.wg_manager import WGManager
-from db.crud import get_or_create_user
-from config import settings
+import io
+from telegram import Update, InputFile
+from telegram.ext import ContextTypes
+from services.wg_manager import WGManager
+from db.crud import get_or_create_user
+from config import settings
 
-wg = WGManager(settings.WG_HOST, settings.WG_SSH_USER, settings.WG_SSH_KEY)
+def make_wg() -> WGManager:
+    # Щоб бот не падав на імпорті, перевіримо змінні під час виклику
+    if not (settings.WG_HOST and settings.WG_SSH_USER and settings.WG_SSH_KEY):
+        raise RuntimeError("Set WG_HOST, WG_SSH_USER, WG_SSH_KEY in .env")
+    return WGManager(settings.WG_HOST, settings.WG_SSH_USER, settings.WG_SSH_KEY)
 
 async def get_config(update: Update, context: ContextTypes.DEFAULT_TYPE):
-    u = update.effective_user
-    dbu = get_or_create_user(u.id, u.username)
-    peer_name = f"tg_{u.id}"
-    try:
-        conf_text, png = wg.add_peer(peer_name)
-    except Exception as e:
-        return await update.message.reply_text(f"Помилка створення конфігу: {e}")
-    await update.message.reply_document(document=InputFile(io.BytesIO(conf_text.encode()), filename=f"{peer_name}.conf"), caption="Твій WireGuard конфіг. Імпортуй у додаток WireGuard.")
-    if png:
-        await update.message.reply_photo(photo=InputFile(io.BytesIO(png), filename=f"{peer_name}.png"), caption="Сквінь QR у додатку WireGuard (Android/iOS).")
+    # гарантуємо, що користувач існує в БД
+    u = update.effective_user
+    get_or_create_user(u.id, u.username)
+
+    peer_name = f"tg_{u.id}"
+
+    try:
+        wg = make_wg()
+        conf_text, png = wg.add_peer(peer_name)
+    except Exception as e:
+        # Показуємо дружню помилку замість падіння
+        return await update.message.reply_text(f"Помилка: {e}")
+
+    # Відправляємо .conf
+    await update.message.reply_document(
+        document=InputFile(io.BytesIO(conf_text.encode()), filename=f"{peer_name}.conf"),
+        caption="Твій WireGuard конфіг. Імпортуй його у додаток WireGuard."
+    )
+    # І QR, якщо згенерувався на сервері
+    if png:
+        await update.message.reply_photo(
+            photo=InputFile(io.BytesIO(png), filename=f"{peer_name}.png"),
+            caption="Скани цей QR у додатку WireGuard (Android/iOS)."
+        )
diff --git a/services/wg_manager.py b/services/wg_manager.py
index 2a8a2fb..d7a7a54 100644
--- a/services/wg_manager.py
+++ b/services/wg_manager.py
@@ -1,24 +1,45 @@
-import paramiko
-import io
-
-class WGManager:
-    def __init__(self, host: str, user: str, key_path: str):
-        self.host = host
-        self.user = user
-        self.key_path = key_path
-
-    def add_peer(self, name: str) -> tuple[str, bytes]:
-        """Повертає (текст конфігу, PNG байти QR)"""
-        key = paramiko.RSAKey.from_private_key_file(self.key_path)
-        ssh = paramiko.SSHClient()
-        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
-        ssh.connect(self.host, username=self.user, pkey=key, timeout=15)
-
-        cmd = f"sudo /usr/local/bin/wg-add-peer {name}"
-        stdin, stdout, stderr = ssh.exec_command(cmd)
-        out = stdout.read().decode()
-        err = stderr.read().decode()
-        if err:
-            ssh.close()
-            raise RuntimeError(err)
+import paramiko
+import io
+
+def _load_pkey(path: str):
+    """
+    Завантажуємо приватний ключ:
+    - спочатку Ed25519 (сучасний дефолт)
+    - якщо не вийшло — пробуємо RSA
+    """
+    try:
+        return paramiko.Ed25519Key.from_private_key_file(path)
+    except Exception:
+        return paramiko.RSAKey.from_private_key_file(path)
+
+class WGManager:
+    def __init__(self, host: str, user: str, key_path: str):
+        self.host = host
+        self.user = user
+        self.key_path = key_path
+
+    def add_peer(self, name: str) -> tuple[str, bytes]:
+        """Повертає (текст конфігу, PNG байти QR)"""
+        key = _load_pkey(self.key_path)
+        ssh = paramiko.SSHClient()
+        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
+        ssh.connect(self.host, username=self.user, pkey=key, timeout=15)
+
+        cmd = f"sudo /usr/local/bin/wg-add-peer {name}"
+        stdin, stdout, stderr = ssh.exec_command(cmd)
+        out = stdout.read().decode()
+        err = stderr.read().decode()
+        if err.strip():
+            ssh.close()
+            raise RuntimeError(err)
 
         # дістаємо шлях до створеного конфігу
         conf_path = None
         for line in out.splitlines():
             if line.startswith("CONFIG_PATH="):
                 conf_path = line.split("=",1)[1].strip()
                 break
         if not conf_path:
             ssh.close()
             raise RuntimeError("No CONFIG_PATH returned")
 
         # заберемо сам конфіг
         sftp = ssh.open_sftp()
         with sftp.file(conf_path, "r") as f:
             conf_text = f.read().decode()
 
         # PNG QR (може не бути, тоді повернемо порожні байти)
         png_bytes = b""
         png_path = conf_path.replace(".conf", ".png")
         try:
             with sftp.file(png_path, "rb") as f:
                 png_bytes = f.read()
         except Exception:
             pass
 
         sftp.close()
         ssh.close()
         return conf_text, png_bytes
diff --git a/requirements.txt b/requirements.txt
index d3e3a77..f2c7b8e 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,7 +1,9 @@
 python-telegram-bot==21.4
 SQLAlchemy==2.0.32
 alembic==1.13.2
 python-dotenv==1.0.1
 httpx==0.27.0
 APScheduler==3.10.4
 loguru==0.7.2
+paramiko==3.4.0
+qrcode==7.4.2
