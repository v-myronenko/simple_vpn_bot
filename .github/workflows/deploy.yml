name: Deploy VPN Bot

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      HOST: ${{ secrets.SERVER_HOST }}
      USER: ${{ secrets.SERVER_USER }}   # раджу: bot
      SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_PORT: ${{ secrets.SSH_PORT || 22 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Preflight – secrets & vars
        env:
          WG_INTERFACE: ${{ vars.WG_INTERFACE }}
          WG_NETWORK: ${{ vars.WG_NETWORK }}
          WG_ENDPOINT_HOST: ${{ vars.WG_ENDPOINT_HOST }}
          WG_ENDPOINT_PORT: ${{ vars.WG_ENDPOINT_PORT }}
          WG_DNS: ${{ vars.WG_DNS }}
          WG_KEEPALIVE: ${{ vars.WG_KEEPALIVE }}
          WG_MTU: ${{ vars.WG_MTU }}
        run: |
          set -e
          # обов'язкові секрети
          [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ] || { echo "❌ SSH_PRIVATE_KEY is empty"; exit 1; }
          [ -n "${{ secrets.SERVER_HOST }}" ]     || { echo "❌ SERVER_HOST is empty"; exit 1; }
          [ -n "${{ secrets.SERVER_USER }}" ]     || { echo "❌ SERVER_USER is empty"; exit 1; }
          [ -n "${{ secrets.SUDO_PASSWORD }}" ]   || { echo "❌ SUDO_PASSWORD is empty"; exit 1; }
          [ -n "${{ secrets.TELEGRAM_TOKEN }}" ]  || { echo "❌ TELEGRAM_TOKEN is empty"; exit 1; }

          # не фейлимось, але попереджаємо, якщо якісь WG_* порожні
          for v in WG_INTERFACE WG_NETWORK WG_ENDPOINT_HOST WG_ENDPOINT_PORT WG_DNS WG_KEEPALIVE WG_MTU; do
            eval "val=\${$v:-}"
            if [ -z "$val" ]; then
              echo "⚠️  $v is empty (буде записано порожнім у .env, якщо не визначено на сервері)"
            fi
          done
      

      - name: Set up SSH
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_ed25519
          echo "${{ env.SSH_KEY }}" > ~/.ssh/id_ed25519
          ssh-keyscan -p "$SSH_PORT" -H "$HOST" >> ~/.ssh/known_hosts

      - name: Ensure target dir & ownership (server)
        run: |
          ssh -p "$SSH_PORT" -i ~/.ssh/id_ed25519 "$USER@$HOST" \
            "sudo install -d -o $USER -g $USER -m 755 /home/$USER/apps/simple_vpn_bot"

      # ⬇️ головний трюк: беремо лише звичайні файли (глоб ./*) — це не включає .git і інші dotfiles
      - name: Upload code (no dotfiles)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USER }}
          key: ${{ env.SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          source: "./*"
          target: "/home/${{ env.USER }}/apps/simple_vpn_bot"
          overwrite: true
          rm: false

      - name: Build & push .env
        run: |
          cat > .env <<EOF
          TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
          WG_INTERFACE=${{ vars.WG_INTERFACE }}
          WG_NETWORK=${{ vars.WG_NETWORK }}
          WG_ENDPOINT_HOST=${{ vars.WG_ENDPOINT_HOST }}
          WG_ENDPOINT_PORT=${{ vars.WG_ENDPOINT_PORT }}
          WG_DNS=${{ vars.WG_DNS }}
          WG_KEEPALIVE=${{ vars.WG_KEEPALIVE }}
          WG_MTU=${{ vars.WG_MTU }}
          DATABASE_URL=sqlite:////home/${{ env.USER }}/data/vpn_users.db
          EOF
          scp -P "$SSH_PORT" -i ~/.ssh/id_ed25519 .env "$USER@$HOST:~/.env"

      - name: Move .env to /etc and prep data dir (sudo)
        run: |
          ssh -p "$SSH_PORT" -i ~/.ssh/id_ed25519 "$USER@$HOST" "
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S install -d -m 755 /etc/vpn-bot
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S mv -f ~/.env /etc/vpn-bot/.env
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S chown root:root /etc/vpn-bot/.env
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S chmod 600 /etc/vpn-bot/.env
            mkdir -p /home/$USER/data
          "

      - name: Create venv & install deps
        run: |
          ssh -p "$SSH_PORT" -i ~/.ssh/id_ed25519 "$USER@$HOST" '
            set -e
            cd ~/apps/simple_vpn_bot
            python3 -m venv .venv || true
            . .venv/bin/activate
            python -m pip install --upgrade pip wheel
            [ -f requirements.txt ] && pip install -r requirements.txt || true
          '

      - name: Ensure systemd unit (and wg0 dependency)
        run: |
          cat > vpn-bot.service <<EOF
          [Unit]
          Description=Simple VPN Telegram Bot
          After=network-online.target
          Wants=network-online.target

          [Service]
          User=${{ env.USER }}
          WorkingDirectory=/home/${{ env.USER }}/apps/simple_vpn_bot
          EnvironmentFile=/etc/vpn-bot/.env
          ExecStart=/home/${{ env.USER }}/apps/simple_vpn_bot/.venv/bin/python /home/${{ env.USER }}/apps/simple_vpn_bot/bot.py
          Restart=on-failure
          RestartSec=5s

          [Install]
          WantedBy=multi-user.target
          EOF

          scp -P "$SSH_PORT" -i ~/.ssh/id_ed25519 vpn-bot.service "$USER@$HOST:~/vpn-bot.service"

          ssh -p "$SSH_PORT" -i ~/.ssh/id_ed25519 "$USER@$HOST" "
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S mv -f ~/vpn-bot.service /etc/systemd/system/vpn-bot.service
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S mkdir -p /etc/systemd/system/vpn-bot.service.d
            echo '[Unit]
          After=wg-quick@wg0.service network-online.target
          Wants=wg-quick@wg0.service

          [Service]
          ExecStartPre=/bin/sh -c '\''for i in \$(seq 1 10); do ip -4 addr show wg0 | grep -q \"inet \" && exit 0; sleep 1; done; echo \"wg0 has no IPv4, failing\"; exit 1'\''' | \
              (echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S tee /etc/systemd/system/vpn-bot.service.d/override.conf >/dev/null)
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S systemctl daemon-reload
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S systemctl enable vpn-bot.service
          "

      - name: Restart & healthcheck
        run: |
          ssh -p "$SSH_PORT" -i ~/.ssh/id_ed25519 "$USER@$HOST" "
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S systemctl restart vpn-bot.service
            sleep 2
            systemctl is-active --quiet vpn-bot.service
            journalctl -u vpn-bot.service -n 20 --no-pager
          "
