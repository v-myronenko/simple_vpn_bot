name: Deploy VPN Bot

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      SERVER_USER: ${{ secrets.SERVER_USER }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Preflight – check required secrets/vars
        run: |
          [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ] || { echo "❌ SSH_PRIVATE_KEY is empty"; exit 1; }
          [ -n "${{ secrets.SERVER_HOST }}" ] || { echo "❌ SERVER_HOST is empty"; exit 1; }
          [ -n "${{ secrets.SERVER_USER }}" ] || { echo "❌ SERVER_USER is empty"; exit 1; }
          [ -n "${{ secrets.SUDO_PASSWORD }}" ] || { echo "❌ SUDO_PASSWORD is empty"; exit 1; }
          [ -n "${{ secrets.TELEGRAM_TOKEN }}" ] || { echo "❌ TELEGRAM_TOKEN is empty"; exit 1; }

      - name: Set up SSH
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_ed25519
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "$SERVER_HOST" >> ~/.ssh/known_hosts

      - name: Rsync project to server
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes "$SERVER_USER@$SERVER_HOST" "mkdir -p ~/apps/simple_vpn_bot"
          rsync -az --delete \
            --exclude '.git' --exclude '.github' \
            -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes" \
            ./ "$SERVER_USER@$SERVER_HOST:~/apps/simple_vpn_bot/"

      # ⚠️ СТВОРЮЄМО .env ПЕРЕД тим як копіювати
      - name: Build .env locally
        run: |
          cat > .env <<EOF
          TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
          WG_INTERFACE=${{ vars.WG_INTERFACE }}
          WG_NETWORK=${{ vars.WG_NETWORK }}
          WG_ENDPOINT_HOST=${{ vars.WG_ENDPOINT_HOST }}
          WG_ENDPOINT_PORT=${{ vars.WG_ENDPOINT_PORT }}
          WG_DNS=${{ vars.WG_DNS }}
          WG_KEEPALIVE=${{ vars.WG_KEEPALIVE }}
          WG_MTU=${{ vars.WG_MTU }}
          EOF
          ls -l .env

      - name: Copy .env to server home (scp)
        run: |
          scp -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes .env "$SERVER_USER@$SERVER_HOST:~/.env"

      - name: Move .env into /etc and set perms (remote sudo)
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes "$SERVER_USER@$SERVER_HOST" 'bash -lc "
            set -e
            PW=\"${{ secrets.SUDO_PASSWORD }}\"
            run(){ printf %s\\n \"$PW\" | sudo -S -p \"\" \"\$@\"; }
            run install -d -m 755 /etc/vpn-bot
            run mv ~/.env /etc/vpn-bot/.env
            run chown root:root /etc/vpn-bot/.env
            run chmod 600 /etc/vpn-bot/.env
          "'

      - name: Create venv & install deps
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes "$SERVER_USER@$SERVER_HOST" 'bash -lc "
            set -e
            cd ~/apps/simple_vpn_bot
            python3 -m venv .venv
            . .venv/bin/activate
            python -m pip install --upgrade pip
            [ -f requirements.txt ] && pip install -r requirements.txt || true
          "'

      - name: Ensure systemd unit (create/update)
        run: |
          # зберемо unit локально з підстановкою користувача
          cat > vpn-bot.service <<EOF
          [Unit]
          Description=Simple VPN Telegram Bot
          After=network-online.target
          Wants=network-online.target
          
          [Service]
          User=${{ secrets.SERVER_USER }}
          WorkingDirectory=/home/${{ secrets.SERVER_USER }}/apps/simple_vpn_bot
          EnvironmentFile=/etc/vpn-bot/.env
          ExecStart=/home/${{ secrets.SERVER_USER }}/apps/simple_vpn_bot/.venv/bin/python /home/${{ secrets.SERVER_USER }}/apps/simple_vpn_bot/bot.py
          Restart=on-failure
          RestartSec=5s
          
          [Install]
          WantedBy=multi-user.target
          EOF

          # передамо на сервер і покладемо у /etc/systemd/system
          scp -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes vpn-bot.service "$SERVER_USER@$SERVER_HOST:~/vpn-bot.service"
      
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes "$SERVER_USER@$SERVER_HOST" 'bash -lc "
            set -e
            PW=\"${{ secrets.SUDO_PASSWORD }}\"
            run(){ printf %s\\n \"$PW\" | sudo -S -p \"\" \"\$@\"; }
            run mv ~/vpn-bot.service /etc/systemd/system/vpn-bot.service
            run chmod 644 /etc/systemd/system/vpn-bot.service
            run systemctl daemon-reload
            run systemctl enable vpn-bot.service
          "'

      - name: Remote deploy
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -Eeuo pipefail
            APP_DIR=/home/bot/apps/simple_vpn_bot
            cd "$APP_DIR"

            # якщо колись зробиш clone на сервері — ці рядки спрацюють, інакше просто пропустяться
            if [ -d .git ]; then
              git fetch --all --prune
              git reset --hard origin/main
            else
              echo "No .git here -> skipping git steps"
            fi

            . .venv/bin/activate
            pip install -r requirements.txt --upgrade
            sudo systemctl daemon-reload
            sudo systemctl restart vpn-bot.service
      

      - name: Restart service
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes "$SERVER_USER@$SERVER_HOST" 'bash -lc "
            PW=\"${{ secrets.SUDO_PASSWORD }}\"
            run(){ printf %s\\n \"$PW\" | sudo -S -p \"\" \"\$@\"; }
            run systemctl daemon-reload
            run systemctl restart vpn-bot.service || run systemctl start vpn-bot.service
            systemctl is-active --quiet vpn-bot.service
          "'
          
      

