name: Deploy VPN Bot (master)

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read

env:
  # Локальні дефолти (можуть бути перекриті GitHub Variables/Secrets)
  DEFAULT_WG_INTERFACE: wg0
  DEFAULT_WG_NETWORK: 10.8.0.0/24
  DEFAULT_WG_ENDPOINT_PORT: "51820"
  DEFAULT_WG_DNS: "1.1.1.1,8.8.8.8"
  DEFAULT_WG_KEEPALIVE: "25"
  DEFAULT_WG_MTU: "1280"
  DEFAULT_DATABASE_URL: "sqlite:////home/bot/data/vpn_users.db"
  REMOTE_APP_DIR: /home/bot/apps/simple_vpn_bot
  REMOTE_DATA_DIR: /home/bot/data
  REMOTE_ENV_DIR: /etc/vpn-bot
  REMOTE_ENV_FILE: /etc/vpn-bot/.env
  REMOTE_SERVICE: vpn-bot.service
  REMOTE_UNIT_PATH: /etc/systemd/system/vpn-bot.service
  REMOTE_DROPIN_DIR: /etc/systemd/system/vpn-bot.service.d
  REMOTE_DROPIN_FILE: /etc/systemd/system/vpn-bot.service.d/override.conf

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show inputs
        run: |
          echo "Deploying commit: $GITHUB_SHA"
          echo "Repo: $GITHUB_REPOSITORY"
          echo "Target host: ${{ secrets.SERVER_HOST }}"

      - name: Upload code to server (rsync over scp)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          source: "."
          target: "${{ env.REMOTE_APP_DIR }}"
          rm: true
          overwrite: true
          strip_components: 0
          # Виключення сміття
          exclude: |
            .git
            .github
            .venv
            **/__pycache__
            **/*.pyc
            .DS_Store

      - name: Deploy & restart remotely
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script_stop: true
          envs: |
            REMOTE_APP_DIR,REMOTE_DATA_DIR,REMOTE_ENV_DIR,REMOTE_ENV_FILE,REMOTE_SERVICE,REMOTE_UNIT_PATH,REMOTE_DROPIN_DIR,REMOTE_DROPIN_FILE,
            DEFAULT_WG_INTERFACE,DEFAULT_WG_NETWORK,DEFAULT_WG_ENDPOINT_PORT,DEFAULT_WG_DNS,DEFAULT_WG_KEEPALIVE,DEFAULT_WG_MTU,DEFAULT_DATABASE_URL,
            # Variables/Secrets з GitHub:
            TELEGRAM_TOKEN,WG_ENDPOINT_HOST,WG_ENDPOINT_PORT,WG_DNS,WG_KEEPALIVE,WG_MTU,WG_INTERFACE,WG_NETWORK,DATABASE_URL
          script: |
            set -Eeuo pipefail

            # ---- helpers (retry з backoff) ----
            retry() {
              local -r tries="${1:-3}"; shift || true
              local -r delay="${1:-2}"; shift || true
              local n=1
              until "$@"; do
                if (( n >= tries )); then
                  echo "Command failed after ${tries} attempts: $*" >&2
                  return 1
                fi
                echo "Retry $n/${tries} -> $*" >&2
                sleep $(( delay * n ))
                ((n++))
              done
            }

            echo "== [1/6] Ensure directories & ownership =="
            retry 3 2 sudo -n /bin/mkdir -p "${REMOTE_APP_DIR}" "${REMOTE_DATA_DIR}" "${REMOTE_ENV_DIR}"
            # Власник коду — bot; дані теж під bot
            if id bot >/dev/null 2>&1; then
              sudo -n chown -R bot:bot "${REMOTE_APP_DIR}" "${REMOTE_DATA_DIR}"
            fi

            echo "== [2/6] Build .env contents =="
            # Збираємо значення з Variables/Secrets або дефолтів
            : "${WG_INTERFACE:=${DEFAULT_WG_INTERFACE}}"
            : "${WG_NETWORK:=${DEFAULT_WG_NETWORK}}"
            : "${WG_ENDPOINT_PORT:=${WG_ENDPOINT_PORT:-${DEFAULT_WG_ENDPOINT_PORT}}"
            : "${WG_DNS:=${WG_DNS:-${DEFAULT_WG_DNS}}}"
            : "${WG_KEEPALIVE:=${WG_KEEPALIVE:-${DEFAULT_WG_KEEPALIVE}}}"
            : "${WG_MTU:=${WG_MTU:-${DEFAULT_WG_MTU}}}"
            : "${DATABASE_URL:=${DATABASE_URL:-${DEFAULT_DATABASE_URL}}}"

            if [ -z "${WG_ENDPOINT_HOST:-}" ]; then
              echo "WARNING: WG_ENDPOINT_HOST is empty. Set repo Variable 'WG_ENDPOINT_HOST' or Secret." >&2
            fi
            if [ -z "${TELEGRAM_TOKEN:-}" ]; then
              echo "ERROR: TELEGRAM_TOKEN is required (GitHub Secret)." >&2
              exit 1
            fi

            TMP_ENV="$(mktemp)"
            cat >"${TMP_ENV}" <<EOF
            TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
            WG_INTERFACE=${WG_INTERFACE}
            WG_NETWORK=${WG_NETWORK}
            WG_ENDPOINT_HOST=${WG_ENDPOINT_HOST:-}
            WG_ENDPOINT_PORT=${WG_ENDPOINT_PORT}
            WG_DNS=${WG_DNS}
            WG_KEEPALIVE=${WG_KEEPALIVE}
            WG_MTU=${WG_MTU}
            DATABASE_URL=${DATABASE_URL}
            EOF

            echo "== [3/6] Install/Update /etc/vpn-bot/.env (root:600) =="
            # Встановлюємо тільки якщо змінився вміст
            if [ -f "${REMOTE_ENV_FILE}" ] && cmp -s "${TMP_ENV}" "${REMOTE_ENV_FILE}"; then
              echo "No changes in .env"
              rm -f "${TMP_ENV}"
            else
              retry 3 2 sudo -n /usr/bin/install -o root -g root -m 600 "${TMP_ENV}" "${REMOTE_ENV_FILE}"
              rm -f "${TMP_ENV}"
              echo ".env updated"
            fi

            echo "== [4/6] Python venv & deps =="
            cd "${REMOTE_APP_DIR}"
            python3 -V
            if [ ! -d .venv ]; then
              retry 3 2 python3 -m venv .venv
            fi
            . .venv/bin/activate
            python -m pip install --upgrade pip wheel setuptools
            retry 3 3 pip install -r requirements.txt

            echo "== [5/6] Systemd unit/drop-in (idempotent) =="
            UNIT_TMP="$(mktemp)"
            cat >"${UNIT_TMP}" <<'UNIT_EOF'
            [Unit]
            Description=Simple VPN Telegram Bot
            After=network-online.target
            Wants=network-online.target

            [Service]
            User=bot
            WorkingDirectory=/home/bot/apps/simple_vpn_bot
            EnvironmentFile=/etc/vpn-bot/.env
            ExecStart=/home/bot/apps/simple_vpn_bot/.venv/bin/python /home/bot/apps/simple_vpn_bot/bot.py
            Restart=on-failure
            RestartSec=5s

            [Install]
            WantedBy=multi-user.target
            UNIT_EOF

            DROPIN_TMP="$(mktemp)"
            cat >"${DROPIN_TMP}" <<'DROPIN_EOF'
            [Unit]
            After=wg-quick@wg0.service network-online.target
            Wants=wg-quick@wg0.service

            [Service]
            ExecStartPre=/bin/sh -c 'for i in $(seq 1 10); do ip -4 addr show wg0 | grep -q "inet " && exit 0; sleep 1; done; echo "wg0 has no IPv4, failing"; exit 1'
            DROPIN_EOF

            NEED_RELOAD=0
            if [ ! -f "${REMOTE_UNIT_PATH}" ] || ! cmp -s "${UNIT_TMP}" "${REMOTE_UNIT_PATH}"; then
              retry 3 2 sudo -n /usr/bin/install -o root -g root -m 0644 "${UNIT_TMP}" "${REMOTE_UNIT_PATH}"
              NEED_RELOAD=1
            fi
            rm -f "${UNIT_TMP}"

            retry 3 2 sudo -n /bin/mkdir -p "${REMOTE_DROPIN_DIR}"
            if [ ! -f "${REMOTE_DROPIN_FILE}" ] || ! cmp -s "${DROPIN_TMP}" "${REMOTE_DROPIN_FILE}"; then
              retry 3 2 sudo -n /usr/bin/install -o root -g root -m 0644 "${DROPIN_TMP}" "${REMOTE_DROPIN_FILE}"
              NEED_RELOAD=1
            fi
            rm -f "${DROPIN_TMP}"

            if [ "${NEED_RELOAD}" -eq 1 ]; then
              sudo -n systemctl daemon-reload
            fi
            sudo -n systemctl enable wg-quick@wg0.service "${REMOTE_SERVICE}"

            echo "== [6/6] Restart & health checks =="
            retry 3 3 sudo -n systemctl restart "${REMOTE_SERVICE}"

            echo "--- systemctl status ---"
            sudo -n systemctl --no-pager --full status "${REMOTE_SERVICE}" || true

            echo "--- last 80 log lines ---"
            sudo -n journalctl -u "${REMOTE_SERVICE}" -n 80 --no-pager || true

            echo "--- wg0 interface v4 presence ---"
            ip -4 addr show wg0 || true
            if ! ip -4 addr show wg0 | grep -q "inet "; then
              echo "WARN: wg0 has no IPv4 address (check wg-quick@wg0.service)" >&2
            fi

            echo "--- wg show ---"
            sudo -n wg show || true

            echo "--- UDP 51820 listening ---"
            ss -ulpn | grep 51820 || echo "NOTE: 51820/udp not listed here (wg may still be up)"

            echo "--- outbound probe (IPv4) ---"
            set +e
            HTTP_CODE=$(curl -4 -m 5 -s -o /dev/null -w "%{http_code}" https://1.1.1.1)
            set -e
            echo "curl https://1.1.1.1 -> HTTP ${HTTP_CODE:-000} (expected non-000)"
            if [ -z "${HTTP_CODE}" ] || [ "${HTTP_CODE}" = "000" ]; then
              echo "WARN: outbound IPv4 curl failed" >&2
            fi

            echo "== DONE =="
