name: Deploy VPN Bot (master)

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read

env:
  REMOTE_APP_DIR: ${{ secrets.SERVER_PATH }}
  REMOTE_DATA_DIR: /home/bot/data
  REMOTE_ENV_DIR: /etc/vpn-bot
  REMOTE_ENV_FILE: /etc/vpn-bot/.env
  REMOTE_SERVICE: vpn-bot.service
  REMOTE_UNIT_PATH: /etc/systemd/system/vpn-bot.service
  REMOTE_DROPIN_DIR: /etc/systemd/system/vpn-bot.service.d
  REMOTE_DROPIN_FILE: /etc/systemd/system/vpn-bot.service.d/override.conf

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Show inputs
        run: |
          echo "Deploying commit: $GITHUB_SHA"
          echo "Repo: $GITHUB_REPOSITORY"
          echo "Target host: ${{ secrets.SERVER_HOST }}"

      - name: Upload code to server (scp)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "."
          target: "${{ env.REMOTE_APP_DIR }}"
          rm: false
          overwrite: true
          strip_components: 0

      - name: Deploy & restart remotely
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          envs: |
            REMOTE_APP_DIR,REMOTE_DATA_DIR,REMOTE_ENV_DIR,REMOTE_ENV_FILE,REMOTE_SERVICE,REMOTE_UNIT_PATH,REMOTE_DROPIN_DIR,REMOTE_DROPIN_FILE,
            TELEGRAM_TOKEN,WG_INTERFACE,WG_NETWORK,WG_ENDPOINT_HOST,WG_ENDPOINT_PORT,WG_DNS,WG_KEEPALIVE,WG_MTU,DATABASE_URL
          script: |
            set -Eeuo pipefail

            retry() {
              local tries="${1:-3}"; shift || true
              local delay="${1:-2}"; shift || true
              local n=1
              until "$@"; do
                if (( n >= tries )); then
                  echo "Command failed after ${tries} attempts: $*" >&2
                  return 1
                fi
                echo "Retry $n/${tries} -> $*" >&2
                sleep $(( delay * n ))
                ((n++))
              done
            }

            echo "== Ensure directories =="
            sudo -n /bin/mkdir -p "${REMOTE_APP_DIR}" "${REMOTE_DATA_DIR}" "${REMOTE_ENV_DIR}"
            if id bot >/dev/null 2>&1; then
              sudo -n chown -R bot:bot "${REMOTE_APP_DIR}" "${REMOTE_DATA_DIR}"
            fi

            echo "== Build .env =="
            TMP_ENV="$(mktemp)"
            cat >"${TMP_ENV}" <<EOF
            TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
            WG_INTERFACE=${WG_INTERFACE}
            WG_NETWORK=${WG_NETWORK}
            WG_ENDPOINT_HOST=${WG_ENDPOINT_HOST}
            WG_ENDPOINT_PORT=${WG_ENDPOINT_PORT}
            WG_DNS=${WG_DNS}
            WG_KEEPALIVE=${WG_KEEPALIVE}
            WG_MTU=${WG_MTU}
            DATABASE_URL=${DATABASE_URL}
            EOF

            sudo -n /usr/bin/install -o root -g root -m 600 "${TMP_ENV}" "${REMOTE_ENV_FILE}"
            rm -f "${TMP_ENV}"

            echo "== Python venv & deps =="
            cd "${REMOTE_APP_DIR}"
            rm -rf .venv || true
            python3 -m venv .venv
            . .venv/bin/activate
            pip install --upgrade pip wheel setuptools
            pip install -r requirements.txt

            echo "== Systemd unit =="
            UNIT_TMP="$(mktemp)"
            cat >"${UNIT_TMP}" <<'UNIT_EOF'
            [Unit]
            Description=Simple VPN Telegram Bot
            After=network-online.target
            Wants=network-online.target

            [Service]
            User=bot
            WorkingDirectory=/home/bot/apps/simple_vpn_bot
            EnvironmentFile=/etc/vpn-bot/.env
            ExecStart=/home/bot/apps/simple_vpn_bot/.venv/bin/python /home/bot/apps/simple_vpn_bot/bot.py
            Restart=on-failure
            RestartSec=5s

            [Install]
            WantedBy=multi-user.target
            UNIT_EOF

            DROPIN_TMP="$(mktemp)"
            cat >"${DROPIN_TMP}" <<'DROPIN_EOF'
            [Unit]
            After=wg-quick@wg0.service network-online.target
            Wants=wg-quick@wg0.service

            [Service]
            ExecStartPre=/bin/sh -c 'for i in $(seq 1 10); do ip -4 addr show wg0 | grep -q "inet " && exit 0; sleep 1; done; echo "wg0 has no IPv4, failing"; exit 1'
            DROPIN_EOF

            sudo -n /usr/bin/install -o root -g root -m 0644 "${UNIT_TMP}" "${REMOTE_UNIT_PATH}"
            sudo -n /bin/mkdir -p "${REMOTE_DROPIN_DIR}"
            sudo -n /usr/bin/install -o root -g root -m 0644 "${DROPIN_TMP}" "${REMOTE_DROPIN_FILE}"
            sudo -n systemctl daemon-reload
            sudo -n systemctl enable wg-quick@wg0.service "${REMOTE_SERVICE}"
            sudo -n systemctl restart "${REMOTE_SERVICE}"

            echo "== Status =="
            sudo -n systemctl --no-pager --full status "${REMOTE_SERVICE}" || true
            sudo -n journalctl -u "${REMOTE_SERVICE}" -n 50 --no-pager || true
